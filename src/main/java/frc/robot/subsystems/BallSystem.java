// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.SendableRegistry;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import frc.robot.Constants;

import edu.wpi.first.wpilibj.controller.PIDController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class BallSystem extends SubsystemBase {

    private Encoder ballSpeedEncoderA;
    private Encoder ballSpeedEncoderB;
    private Spark ballMotorA;
    private Spark ballMotorB;

    private PIDController controllerA;
    private PIDController controllerB;

    public BallSystem() {
        controllerA = new PIDController(Constants.BALLSHOOT_P, Constants.BALLSHOOT_I, Constants.BALLSHOOT_D);
        controllerB = new PIDController(Constants.BALLSHOOT_P, Constants.BALLSHOOT_I, Constants.BALLSHOOT_D);

        SendableRegistry.add(controllerA, "Ball Shooter A");
        SendableRegistry.add(controllerB, "Ball Shooter B");

        ballSpeedEncoderA = new Encoder(Constants.BallSpeedEncoderAID, Constants.BallSpeedEncoderBID, false, EncodingType.k4X);
        SendableRegistry.add(ballSpeedEncoderA, "Encoder A");
        ballSpeedEncoderA.setDistancePerPulse(Constants.BALLSHOOT_ENCODER_CONSTANT);
        ballSpeedEncoderA.setSamplesToAverage(4);

        ballSpeedEncoderB = new Encoder(Constants.BallSpeedEncoderAID, Constants.BallSpeedEncoderBID, false, EncodingType.k4X);
        SendableRegistry.add(ballSpeedEncoderB, "Encoder B");
        ballSpeedEncoderB.setDistancePerPulse(Constants.BALLSHOOT_ENCODER_CONSTANT);
        ballSpeedEncoderB.setSamplesToAverage(4);
        //ballSpeedEncoder.setPIDSourceType(PIDSourceType.kRate);
                
        /*----------Shooter Management----------*/

        ballMotorA = new Spark(Constants.TopBallMotorID);
        addChild("BallMotorA",ballMotorA);
        ballMotorA.setInverted(false);
                
        ballMotorB = new Spark(Constants.BottomBallMotorID);
        addChild("BallMotorB",ballMotorB);
        ballMotorB.setInverted(true);
                
                
    }
  
    public void setShooterSpeed(double A, double B) {
        double actualA = ballSpeedEncoderA.getRate();
        double actualB = ballSpeedEncoderB.getRate();
        controllerA.setSetpoint(A);
        controllerB.setSetpoint(B);
        double desiredA = controllerA.calculate(actualA);
        double desiredB = controllerB.calculate(actualB);
        ballMotorA.set(desiredA);
        ballMotorB.set(desiredB);
    }

}
